# SPDX-FileCopyrightText: 2022 Peter Urban, Ghent University
#
# SPDX-License-Identifier: CC0-1.0

name: CI

on:
  push:
    branches: [ main ]
    
    paths-ignore:
      - '.github/workflows/python-package*'
      - '.github/workflows/cibuildwheels*'
      - '.github/workflows/conda*'
      - 'conda.recipe/*'
    #paths:
    #  - "**meson.build"
    #  - "**.cpp"
    #  - "**.c"
    #  - "**.h"
  pull_request:
    branches: [ main ]
    
    paths-ignore:
      - '.github/workflows/python-package*'
      - '.github/workflows/cibuildwheels*'
      - '.github/workflows/conda*'
      - 'conda.recipe/*'
    #paths:
    #  - "**meson.build"
    #  - "**.cpp"
    #  - "**.c"
    #  - "**.h"

# env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release
  
jobs:
  linux:
    name: Build and install with meson on ${{matrix.container}}
    strategy:
      matrix:
        include:  
          - { container: 'ghcr.io/themachinethatgoesping/ubuntu-dep:latest'}
          - { container: 'ubuntu:22.04', 
              pre-dep : 'apt update && apt-get install -y sudo git', 
              dep : 'sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ccache pkg-config cmake python3-pip libboost-all-dev libcurl4-openssl-dev', 
              pip : 'pip install meson ninja pytest' }
          - { container: 'ubuntu:20.04', 
              pre-dep : 'apt update && apt-get install -y sudo git', 
              dep : 'sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ccache pkg-config cmake python3-pip libboost-all-dev libcurl4-openssl-dev', 
              pip : 'pip install meson ninja pytest' }
          - { container: 'archlinux', 
              pre-dep : 'pacman -Syu --noconfirm; pacman -Syy sudo git --noconfirm', 
              dep : 'sudo pacman -Syy --noconfirm base-devel ccache pkg-config cmake python-pip boost curl', 
              pip : 'pip install meson ninja pytest' }
    
    runs-on: ubuntu-latest
    container: ${{matrix.container}}

    steps:
    - name: install prequisits
      if:  ${{matrix.pre-dep}}
      run: ${{matrix.pre-dep}}

    - name: checkout main repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: install dependecies (c++)
      if:  ${{matrix.dep}}
      run: ${{matrix.dep}}
      
    - name: install dependcies (meson & pythone)
      if:  ${{matrix.pip}}
      run: ${{matrix.pip}}

    - name: configure meson
      run: meson setup builddir/; meson configure builddir -Dpython.install_env=auto -Dprefix=/usr/;
      env:
        CC: gcc

    - name: compile project
      run: meson compile -C builddir/

    - name: test (cpp)
      run: meson test -C builddir/ -v

    - name: install project
      run: meson install -C builddir/

    - name: install pip requirements
      run: pip install -r requirements.txt

    - name: test (pytest)
      run: pytest -v
      
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: ${{matrix.container}}_Testlog
        path: builddir/meson-logs/testlog.txt
    

  build-on-windows:
    name: Build and install with meson on windows
    strategy:
        matrix:
          boost-version: [1.79.0]
          boost-version_: [1_79_0]
          boost-modules: [--with-filesystem]
          
    
    env:
      CC: msvc-14.3

    runs-on: windows-latest
    #container: python:latest #pull directly from dockerhub   
    steps:

    - uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    
    # make sure meson can find msvc
    - name: Prepare MSVC
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64

    - name: checkout main repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache Boost
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: c:\Boost
        key: windows-msvc-14.3-boost-${{matrix.boost-version}}-${{matrix.boost-modules}}
  
    - name: Install dependencies on windows
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://boostorg.jfrog.io/artifactory/main/release/${{matrix.boost-version}}/source/boost_${{matrix.boost-version_}}.7z -outfile boost.7z
        7z x boost.7z 
        cd .\boost_${{matrix.boost-version_}}\
        .\bootstrap.bat
        .\b2.exe install --variant=release --threading=multi --link=static ${{matrix.boost-modules}}
        cd ..
        #rm -rv boost*

    # same as for linux

    - name: install dependcies (meson & pythone)
      run: pip install meson ninja pytest

    - name: configure meson
      run: |
        meson setup builddir/ -D"python.install_env=auto" -Dcpp_std=c++17 -Ddefault_library=static -D"python.install_env=auto"

    - name: compile project
      run: meson compile -C builddir/

    - name: test (cpp)
      run: meson test -C builddir/ -v

    - name: install project
      run: meson install -C builddir/

    - name: install pip requirements
      run: pip install -r requirements.txt

    - name: test (pytest)
      run: pytest -v
    
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: Windows_Meson_Testlog
        path: builddir/meson-logs/testlog.txt

  macos:
    name: Build and install with meson on macOS
    runs-on: macos-latest
    
    env:
      CC: msvc-14.3
      
    steps:
    
    - uses: actions/setup-python@v3
      with:
        python-version: '3.x'
        
    - name: checkout main repository
      uses: actions/checkout@v3
      with:
        submodules: recursive
        
    - run: brew install libomp boost
    
    - run: pip install meson ninja pytest
    
    - name: configure meson
      run: meson setup builddir/; meson configure builddir -Dpython.install_env=auto

    - name: compile project
      run: meson compile -C builddir/

    - name: test (cpp)
      run: meson test -C builddir/ -v

    - name: install project
      run: meson install -C builddir/

    - name: install pip requirements
      run: pip install -r requirements.txt

    - name: test (pytest)
      run: pytest -v
      
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: ${{matrix.container}}_Testlog
        path: builddir/meson-logs/testlog.txt

      
