# SPDX-FileCopyrightText: 2022 Peter Urban, Ghent University
#
# SPDX-License-Identifier: CC0-1.0

name: CI

on:
  push:
    branches: [ main ]
    
    paths-ignore:
      - '.github/workflows/python-package*'
    #paths:
    #  - "**meson.build"
    #  - "**.cpp"
    #  - "**.c"
    #  - "**.h"
  pull_request:
    branches: [ main ]
    
    paths-ignore:
      - '.github/workflows/python-package*'
    #paths:
    #  - "**meson.build"
    #  - "**.cpp"
    #  - "**.c"
    #  - "**.h"

# env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release
  
jobs:
  linux:
    strategy:
      matrix:
        include:  
          - { container: 'ghcr.io/themachinethatgoesping/ubuntu-dep:latest'}
          - { container: 'ubuntu:22.04', 
              pre-dep : 'apt update && apt-get install -y sudo git', 
              dep : 'sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ccache pkg-config cmake python3-pip libboost-all-dev libcurl4-openssl-dev', 
              pip : 'pip install meson ninja pytest' }
          - { container: 'ubuntu:20.04', 
              pre-dep : 'apt update && apt-get install -y sudo git', 
              dep : 'sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential ccache pkg-config cmake python3-pip libboost-all-dev libcurl4-openssl-dev', 
              pip : 'pip install meson ninja pytest' }
          - { container: 'archlinux', 
              pre-dep : 'pacman -Syu --noconfirm; pacman -Syy sudo git --noconfirm', 
              dep : 'sudo pacman -Syy --noconfirm base-devel ccache pkg-config cmake python-pip boost curl', 
              pip : 'pip install meson ninja pytest' }
    
    runs-on: ubuntu-latest
    container: ${{matrix.container}}

    steps:
    - name: install prequisits
      if:  ${{matrix.pre-dep}}
      run: ${{matrix.pre-dep}}

    - name: checkout main repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: install dependecies (c++)
      if:  ${{matrix.dep}}
      run: ${{matrix.dep}}
      
    - name: install dependcies (meson & pythone)
      if:  ${{matrix.pip}}
      run: ${{matrix.pip}}

    - name: configure meson
      run: meson setup builddir/; meson configure builddir -Dpython.install_env=auto -Dprefix=/usr/;
      env:
        CC: gcc

    - name: compile project
      run: meson compile -C builddir/

    - name: test (cpp)
      run: meson test -C builddir/ -v

    - name: install project
      run: meson install -C builddir/

    - name: test (pytest)
      run: pytest -v
      
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: ${{matrix.container}}_Testlog
        path: builddir/meson-logs/testlog.txt
    

  build-on-windows:
    strategy:
        matrix:
          boost-version: [1.74.0]
          boost-version_: [1_74_0]
          boost-modules: ["filesystem"]
          
    
    env:
      CC: msvc-14.3

    runs-on: windows-latest
    #container: python:latest #pull directly from dockerhub   
    steps:

    - uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: checkout main repository
      uses: actions/checkout@v3
      with:
        submodules: recursive
  
    - name: Install dependencies on windows
      run: Invoke-WebRequest -Uri https://boostorg.jfrog.io/artifactory/main/release/${{matrix.boost-version}}/source/boost_${{matrix.boost-version_}}.7z -outfile boost.7z
    - run: 7z a boost.7z boostsrc
    - run: cd .\boostsrc\
    - run: .\bootstrap.bat --with-libraries=${{matrix.boost-modules}}
    - run: .\b2 install --variant=release --threading=multi --link=static
    - run: cd ..
    - run: rm -rv boost*

    - run: pip install meson ninja
    - run: meson setup builddir/
    - run: meson test -C builddir/ -v
    
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: Windows_Meson_Testlog
        path: builddir/meson-logs/testlog.txt

#   macos:
#     runs-on: macos-latest
#     steps:
#     - uses: actions/checkout@v1
#     - uses: actions/setup-python@v1
#       with:
#         python-version: '3.x'
#     - run: brew install gcc
#     - run: pip install meson ninja
#     - run: meson setup builddir/
#       env:
#         CC: gcc
#     - run: meson test -C builddir/ -v
#     - uses: actions/upload-artifact@v1
#       if: failure()
#       with:
#         name: MacOS_Meson_Testlog
#         path: builddir/meson-logs/testlog.txt

      
