# SPDX-FileCopyrightText: 2022 - 2023 Peter Urban, Ghent University
#
# SPDX-License-Identifier: CC0-1.0

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions

name: Build Python Package Windows

on:
  push:
    branches: [ main ]    
    paths-ignore:
      - '.github/workflows/ci*'
      - '.github/workflows/python-package-linux*'
      - '.github/workflows/python-package-mac*'
      - '.github/workflows/cibuildwheels*'
      - '.github/workflows/conda*'
      - '.github/workflows/test_*'
      - 'conda.recipe/*'
      - '*.md'
      - 'doc/*'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/ci*'
      - '.github/workflows/python-package-linux*'
      - '.github/workflows/python-package-mac*'
      - '.github/workflows/cibuildwheels*'
      - '.github/workflows/conda*'
      - '.github/workflows/test_*'
      - 'conda.recipe/*'
      - '*.md'
      - 'doc/*'

# make sure that multiple jobs don't run for the same action (new commits cancel old jobs when they are still running)
# Souce Ralf Gommers (commit to meson-python)
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
  
jobs:
  build_wheel:
    name: ${{matrix.os}} python ${{ matrix.python-version }}
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        python-version: ['3.11','3.12','3.13']
        boost-version: [1.87.0]
        boost-version_: [1_87_0]
        boost-modules: [--with-iostreams]
        #toolset: [msvc-14.32]
        #toolset: [clang-cl]
        include:
        - toolset: vc143
          compiler: clang-cl
          cpp_std: c++20

        # - python-version: '3.12'
        #   pip-pre: '--pre'

    env:
      CC: ${{matrix.compiler}}
      CXX: ${{matrix.compiler}}
      NINJA: d:\ninja.exe

    steps:
    - uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.python-version}}

    - name: checkout main repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: false

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: tmtgp-pypi-windows-${{ matrix.python-version }}  # name for the cache
            
    # make sure meson can find msvc
    - name: Prepare MSVC
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64

    - name: Cache Boost
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: c:\Boost
        key: windows-${{matrix.toolset}}-boost-${{matrix.boost-version}}-${{matrix.boost-modules}}

    - name: Install boost
      if: steps.index-boost.outputs.index-hit != 'true'
      run: |
          Invoke-WebRequest -Uri https://archives.boost.io/release/${{matrix.boost-version}}/source/boost_${{matrix.boost-version_}}.7z -outfile boost.7z
          7z x boost.7z
          cd .\boost_${{matrix.boost-version_}}\
          .\bootstrap.bat ${{matrix.toolset}}
          .\b2.exe install --variant=release --threading=multi --link=static ${{matrix.boost-modules}}
          cd ..
          #rm -rv boost*


    #same as on linux
    - name: checkout main repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: false
    
    - name: Install dependencies (pip)
      run: |
        pip install --upgrade pip
        pip install meson meson-python pytest twine wheel pyproject-metadata
        pip install -r requirements.txt ${{ matrix.pip-pre }}
        
    - name: download ninja long path
      run : |
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/themachinethatgoesping/tools/main/ninja-windows/ninja.exe -OutFile d:\ninja.exe

    - name: check ninja executable path
      run: |
        $env:NINJA
        d:\ninja.exe --version
         
    - name: build and install wheel
      run: |
        # build wheel
        pip wheel -w dist . --config-settings="builddir=pybuild" --no-build-isolation --no-deps -v
        # install wheel
        pip install . --config-settings="builddir=pybuild" --no-build-isolation
        
    - name: Store the binary wheel
      uses: actions/upload-artifact@v4
      with:
        name: python-${{ matrix.python-version }}-package-windows
        path: dist    
         
    - name: Test with meson (c++)
      run: |
        ninja test -C pybuild --verbose
        
    - name: Test with pytest
      run: |
        pytest -v
        
        
  install_and_test:
    name: Install and test windows wheel for python 3.${{ matrix.python-3-version }}
    needs: build_wheel
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        python-3-version: ['11','12','13']

        # include:
        #   - python-version: '3.12'
        #     pip-pre: '--pre'
    steps:

    - uses: actions/setup-python@v3
      with:
        python-version: 3.${{matrix.python-3-version}}

    #necessary only for pytest
    - name: checkout main repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: false

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-3.${{ matrix.python-3-version }}-package-windows
        path: dist/

    - name: install pip dependencies
      # missing typing_extensions caused an error with pypi-publish ...
      run: pip install pytest typing_extensions 

    - name: install wheels
      run: |
        pip install $(ls dist/*-cp3${{matrix.python-3-version}}-*.whl) ${{matrix.pip-pre}}
        
    - name: test (pytest)
      run: pytest
    

  publish_wheel:
    needs: install_and_test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11','3.12','3.13']
        
    steps:
    - uses: actions/setup-python@v3

    - name: install pip dependencies
      # missing typing_extensions caused an error with pypi-publish ...
      run: pip install typing_extensions 
    
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-${{ matrix.python-version }}-package-windows
        path: dist/
        
    - name: Publish package
      # Note 1: In the future the skip existing option should be removed and replaced with the only publish on tags option (if)
      # Note 2: Packages will only be updated when the meson.build version number is changed! (existing will be skipped not updated)
      # Note 3: In the future this should better build against test.pypi repository!
      #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ./dist/

  # delay for one minute before attempting to download the packages from pypi
  delay_after_publish:
    needs: publish_wheel
    runs-on: ubuntu-latest
    steps:
    - name: Sleep for 10s
      run: sleep 10s
      shell: bash

  test_pypi:
    needs: delay_after_publish
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11','3.12','3.13']

        # include:
        #   - python-version: '3.12'
        #     pip-pre: '--pre'

    steps:
    - name: checkout main repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: false

    - uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.python-version}}

    - name: install via pip
      run: pip install themachinethatgoesping pytest ${{matrix.pip-pre}}

    - name: pytest from git repo
      run: pytest -v
      
