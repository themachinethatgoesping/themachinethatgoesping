from __future__ import annotations
from collections import defaultdict
from copy import deepcopy
import datetime as dt
import matplotlib as mpl
from matplotlib import dates as mdates
import numpy as np
import themachinethatgoesping as theping
from themachinethatgoesping import echosounders
from themachinethatgoesping import pingprocessing
from themachinethatgoesping.pingprocessing.core.progress import get_progress_iterator
from themachinethatgoesping.pingprocessing.watercolumn.echograms.echolayer import EchoLayer
from themachinethatgoesping.pingprocessing.watercolumn.echograms.echolayer import PingData
from tqdm.asyncio import tqdm_asyncio as tqdm
import typing
__all__ = ['EchoLayer', 'EchogramBuilder', 'PingData', 'deepcopy', 'defaultdict', 'dt', 'echosounders', 'get_progress_iterator', 'mdates', 'mpl', 'np', 'pingprocessing', 'theping', 'tqdm']
class EchogramBuilder:
    __firstlineno__: typing.ClassVar[int] = 19
    __static_attributes__: typing.ClassVar[tuple] = ('beam_sample_selections', 'depth_to_y_coordinate_interpolator', 'has_depths', 'has_ranges', 'has_sample_nrs', 'indice_to_x_coordinate_interpolator', 'initialized', 'layers', 'linear_mean', 'main_layer', 'max_depths', 'max_number_of_samples', 'max_ranges', 'max_sample_nrs', 'min_depths', 'min_ranges', 'min_sample_nrs', 'param', 'ping_numbers', 'ping_times', 'pings', 'range_to_y_coordinate_interpolator', 'res_depths', 'res_ranges', 'res_sample_nrs', 'sample_nr_to_y_coordinate_interpolator', 'time_zone', 'vec_max_y', 'vec_min_y', 'vec_x_val', 'wci_value', 'x_axis_function', 'x_axis_name', 'x_coordinate_indice_interpolator', 'x_coordinates', 'x_extent', 'x_interpolation_limit', 'x_kwargs', 'x_resolution', 'y_axis_function', 'y_axis_name', 'y_coordinate_indice_interpolator', 'y_coordinates', 'y_extent', 'y_indice_to_depth_interpolator', 'y_indice_to_range_interpolator', 'y_indice_to_sample_nr_interpolator', 'y_indice_to_y_coordinate_interpolator', 'y_kwargs', 'y_resolution')
    @staticmethod
    def sample_y_coordinates(vec_min_y, vec_max_y, vec_res_y, min_y, max_y, max_samples = 2048):
        ...
    @classmethod
    def from_pings(cls, pings, pss = ..., wci_value: str = 'sv/av/pv/rv', linear_mean = True, no_navigation = False, apply_pss_to_bottom = False, verbose = True):
        ...
    def __init__(self, pings, times, beam_sample_selections, wci_value, linear_mean):
        ...
    def __set_layer__(self, name, layer):
        ...
    def add_layer(self, name, vec_x_val, vec_min_y, vec_max_y):
        ...
    def add_layer_from_ping_param_offsets_absolute(self, name, ping_param_name, offset_0, offset_1):
        ...
    def add_layer_from_ping_param_offsets_relative(self, name, ping_param_name, offset_0, offset_1):
        ...
    def add_layer_from_static_layer(self, name, min_y, max_y):
        ...
    def add_ping_param(self, name, x_reference, y_reference, vec_x_val, vec_y_val):
        ...
    def build_image(self, progress = None):
        ...
    def build_image_and_layer_image(self, progress = None):
        ...
    def build_image_and_layer_images(self, progress = None):
        ...
    def clear_layers(self):
        ...
    def copy_xy_axis(self, other):
        ...
    def get_extent_layers(self, nr, axis_name = None):
        ...
    def get_filtered_by_y_extent(self, vec_x_val, vec_min_y, vec_max_y):
        ...
    def get_limits_layers(self, nr, axis_name = None):
        ...
    def get_ping_param(self, name, use_x_coordinates = False):
        ...
    def get_wci(self, nr):
        ...
    def get_wci_layers(self, nr):
        ...
    def get_x_indices(self):
        ...
    def get_y_indices(self, wci_nr):
        ...
    def iterate_ping_data(self, keep_to_xlimits = True):
        ...
    def reinit(self):
        ...
    def remove_layer(self, name):
        ...
    def set_depth_extent(self, min_depths, max_depths):
        ...
    def set_linear_mean(self, linear_mean):
        ...
    def set_ping_numbers(self, ping_numbers):
        ...
    def set_ping_times(self, ping_times, time_zone = ...):
        ...
    def set_range_extent(self, min_ranges, max_ranges):
        ...
    def set_sample_nr_extent(self, min_sample_nrs, max_sample_nrs):
        ...
    def set_x_axis_date_time(self, min_ping_time = ..., max_ping_time = ..., time_resolution = ..., time_interpolation_limit = ..., max_steps = 20000):
        ...
    def set_x_axis_ping_nr(self, min_ping_nr = 0, max_ping_nr = ..., max_steps = 8096):
        ...
    def set_x_axis_ping_time(self, min_timestamp = ..., max_timestamp = ..., time_resolution = ..., time_interpolation_limit = ..., max_steps = 20000):
        ...
    def set_x_coordinates(self, name, x_coordinates, x_resolution, x_interpolation_limit, vec_x_val):
        ...
    def set_y_axis_depth(self, min_depth = ..., max_depth = ..., max_samples = 2048):
        ...
    def set_y_axis_range(self, min_range = ..., max_range = ..., max_samples = 2048):
        ...
    def set_y_axis_sample_nr(self, min_sample_nr = 0, max_sample_nr = ..., max_samples = 2048):
        ...
    def set_y_axis_y_indice(self, min_sample_nr = 0, max_sample_nr = ..., max_samples = 2048):
        ...
    def set_y_coordinates(self, name, y_coordinates, y_resolution, vec_min_y, vec_max_y):
        ...
