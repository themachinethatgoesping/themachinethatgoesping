from __future__ import annotations
from collections import defaultdict
import datetime as dt
import matplotlib as mpl
from matplotlib import dates as mdates
import numpy as np
import themachinethatgoesping as Ping
from themachinethatgoesping import echosounders
from themachinethatgoesping import pingprocessing
from tqdm.asyncio import tqdm_asyncio as tqdm
__all__ = ['EchoData', 'Ping', 'defaultdict', 'dt', 'echosounders', 'mdates', 'mpl', 'np', 'pingprocessing', 'tqdm']
class EchoData:
    @staticmethod
    def sample_y_coordinates(vec_min_y, vec_max_y, vec_res_y, min_y, max_y, max_samples = ...):
        ...
    @classmethod
    def from_pings(cls, pings, pss = ..., wci_value: str = 'av', linear_mean = True, apply_pss_to_bottom = False, verbose = True):
        ...
    def __init__(self, wc_data, times):
        ...
    def add_ping_param(self, name, x_reference, y_reference, vec_x_val, vec_y_val):
        ...
    def build_image(self):
        ...
    def get_filtered_by_y_extent(self, vec_x_val, vec_min_y, vec_max_y):
        ...
    def get_ping_param(self, name, use_x_coordinates = False):
        ...
    def get_x_indices(self):
        ...
    def get_y_indices(self, wci_nr):
        ...
    def reinit(self):
        ...
    def set_depth_extent(self, min_depths, max_depths):
        ...
    def set_ping_numbers(self, ping_numbers):
        ...
    def set_ping_times(self, ping_times, time_zone = ...):
        ...
    def set_range_extent(self, min_ranges, max_ranges):
        ...
    def set_x_axis_date_time(self, min_ping_time = ..., max_ping_time = ..., time_resolution = ..., time_interpolation_limit = ..., max_steps = 20000):
        ...
    def set_x_axis_ping_nr(self, min_ping_nr = 0, max_ping_nr = ..., max_steps = ...):
        ...
    def set_x_axis_ping_time(self, min_timestamp = ..., max_timestamp = ..., time_resolution = ..., time_interpolation_limit = ..., max_steps = 20000):
        ...
    def set_x_coordinates(self, name, x_coordinates, x_resolution, x_interpolation_limit, vec_x_val):
        ...
    def set_y_axis_depth(self, min_depth = ..., max_depth = ..., max_samples = ...):
        ...
    def set_y_axis_range(self, min_range = ..., max_range = ..., max_samples = ...):
        ...
    def set_y_axis_sample_nr(self, min_sample_nr = 0, max_sample_nr = ..., max_samples = ...):
        ...
    def set_y_coordinates(self, name, y_coordinates, y_resolution, vec_min_y, vec_max_y):
        ...
