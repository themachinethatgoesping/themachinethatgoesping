context:
  version: 0.30.6.dev

package:
  name: themachinethatgoesping
  version: ${{ version }}

source:
  #path: ../
  git: https://github.com/themachinethatgoesping/themachinethatgoesping.git

build:
  script:
    - if: unix
      then:
        - export CPPFLAGS="-I$PREFIX/include $CPPFLAGS" # [unix]
        - export LDFLAGS="-L$PREFIX/lib $LDFLAGS" # [unix]
        - export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" # [unix]
        - export BOOST_ROOT="$PREFIX" # [unix]
    - if: win
      then:
        - set CC=clang-cl
        - set CXX=clang-cl
        - set CXXFLAGS=%CXXFLAGS% /EHsc #split in two lines to avoid issues with the conda build system
        - set AR=llvm-lib  # Add this line - use LLVM archiver instead of lib.exe
        - set BOOST_ROOT=%PREFIX%\Library # [win]
        - set PATH=%PREFIX%\Library\bin;%PATH% # [win]
        - set INCLUDE=%PREFIX%\Library\include;%INCLUDE% # [win]
        - set LIB=%PREFIX%\Library\lib;%LIB% # [win]
        - curl -L https://raw.githubusercontent.com/themachinethatgoesping/tools/main/ninja-windows/ninja.exe -o ninja.exe # [win]
        - set NINJA=%CD%\ninja.exe # [win]
    - if: osx
      then:
        - export MACOSX_DEPLOYMENT_TARGET=14.0 # [osx]
        - export CXXFLAGS="-stdlib=libc++ $CXXFLAGS" # [osx]
        - export LDFLAGS="-undefined dynamic_lookup -Wl,-no_fixup_chains -Wl,-dead_strip"
        - export CXXFLAGS="${CXXFLAGS} -D_LIBCPP_DISABLE_AVAILABILITY" # [osx]
    - ${{ PYTHON }} -m pip install . -v --config-settings=setup-args="-Dunity=on" --config-settings=setup-args="-Dunity_size=999999999" --config-settings=setup-args="-Ddynamic_boost=enabled" --config-settings=setup-args="-Dforce_openmp=enabled"
    #- ${{ PYTHON }} -m pip install . -v --config-settings=setup-args="-Ddynamic_boost=enabled" --config-settings=setup-args="-Dforce_openmp=enabled"
  number: 0

requirements:
  build:
    - meson>=1.9.0
    - ninja
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    - cmake
    - pkgconfig
    - boost-cpp >=1.84.0,<1.90.0
    - if: win
      then:
        - clang # Use clang toolchain consistently
        - lld   # Use LLD linker (not lib.exe)  
        - llvm-tools # Add LLVM tools including llvm-lib
        - llvm-openmp # [win]
    - if: osx
      then:
        - clang_osx-arm64 =20 # [osx]
        - clangxx_osx-arm64 =20 # [osx]
        - llvm-openmp # [osx] - Keep for macOS

  host:
    - python
    - meson-python>=0.15.0
    - pybind11>=2.13.2,<2.14.0
    - numpy>=2.0.0,<2.5
    - pip
    - boost-cpp >=1.84.0,<1.90.0
    - if: win
      then:
        - vs2022_win-64 # [win]
        - llvm-openmp # [win] - Keep LLVM OpenMP
    - if: osx
      then:
        - libcxx =20 # [osx]
        - llvm-openmp # [osx]

  run:
    - python
    - numba
    - ${{ pin_compatible('boost-cpp') }}
    - ipywidgets
    - ipympl
    - matplotlib
    - pandas
    - rasterio
    - tqdm
    - scipy
    - pytimeparse2
    - numpy < 2.3
    - if: win
      then:
        - llvm-openmp # [win] - Add back LLVM OpenMP for Windows runtime
        - nomkl
    - if: osx
      then:
        - llvm-openmp # [osx] - Keep for macOS
        - nomkl

tests:
  - python:
      imports:
        - themachinethatgoesping
      pip_check: true

about:
  #home: https://github.com/themachinethatgoesping
  summary: Enable advanced processing for multibeam and singlebeam echosounder data. THIS PROJECT IS IN DEVELOPMENT.
  license: MPL-2.0
  license_file: LICENSE
# maintainers:
#   - Peter Urban
